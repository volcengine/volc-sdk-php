<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: volcengine/vod/business/vod_cdn.proto

namespace Volc\Service\Vod\Models\Business;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>Volcengine.Vod.Models.Business.CompressionAction</code>
 */
class CompressionAction extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>optional string CompressionFormat = 1;</code>
     */
    protected $CompressionFormat = null;
    /**
     * Generated from protobuf field <code>optional string CompressionTarget = 2;</code>
     */
    protected $CompressionTarget = null;
    /**
     * Generated from protobuf field <code>repeated string CompressionType = 3;</code>
     */
    private $CompressionType;
    /**
     * Generated from protobuf field <code>optional int64 MaxFileSizeKB = 4;</code>
     */
    protected $MaxFileSizeKB = null;
    /**
     * Generated from protobuf field <code>optional int64 MinFileSizeKB = 5;</code>
     */
    protected $MinFileSizeKB = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $CompressionFormat
     *     @type string $CompressionTarget
     *     @type string[]|\Google\Protobuf\Internal\RepeatedField $CompressionType
     *     @type int|string $MaxFileSizeKB
     *     @type int|string $MinFileSizeKB
     * }
     */
    public function __construct($data = NULL) {
        \Volc\Service\Vod\Models\GPBMetadata\VodCdn::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>optional string CompressionFormat = 1;</code>
     * @return string
     */
    public function getCompressionFormat()
    {
        return isset($this->CompressionFormat) ? $this->CompressionFormat : '';
    }

    public function hasCompressionFormat()
    {
        return isset($this->CompressionFormat);
    }

    public function clearCompressionFormat()
    {
        unset($this->CompressionFormat);
    }

    /**
     * Generated from protobuf field <code>optional string CompressionFormat = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setCompressionFormat($var)
    {
        GPBUtil::checkString($var, True);
        $this->CompressionFormat = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>optional string CompressionTarget = 2;</code>
     * @return string
     */
    public function getCompressionTarget()
    {
        return isset($this->CompressionTarget) ? $this->CompressionTarget : '';
    }

    public function hasCompressionTarget()
    {
        return isset($this->CompressionTarget);
    }

    public function clearCompressionTarget()
    {
        unset($this->CompressionTarget);
    }

    /**
     * Generated from protobuf field <code>optional string CompressionTarget = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setCompressionTarget($var)
    {
        GPBUtil::checkString($var, True);
        $this->CompressionTarget = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>repeated string CompressionType = 3;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getCompressionType()
    {
        return $this->CompressionType;
    }

    /**
     * Generated from protobuf field <code>repeated string CompressionType = 3;</code>
     * @param string[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setCompressionType($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->CompressionType = $arr;

        return $this;
    }

    /**
     * Generated from protobuf field <code>optional int64 MaxFileSizeKB = 4;</code>
     * @return int|string
     */
    public function getMaxFileSizeKB()
    {
        return isset($this->MaxFileSizeKB) ? $this->MaxFileSizeKB : 0;
    }

    public function hasMaxFileSizeKB()
    {
        return isset($this->MaxFileSizeKB);
    }

    public function clearMaxFileSizeKB()
    {
        unset($this->MaxFileSizeKB);
    }

    /**
     * Generated from protobuf field <code>optional int64 MaxFileSizeKB = 4;</code>
     * @param int|string $var
     * @return $this
     */
    public function setMaxFileSizeKB($var)
    {
        GPBUtil::checkInt64($var);
        $this->MaxFileSizeKB = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>optional int64 MinFileSizeKB = 5;</code>
     * @return int|string
     */
    public function getMinFileSizeKB()
    {
        return isset($this->MinFileSizeKB) ? $this->MinFileSizeKB : 0;
    }

    public function hasMinFileSizeKB()
    {
        return isset($this->MinFileSizeKB);
    }

    public function clearMinFileSizeKB()
    {
        unset($this->MinFileSizeKB);
    }

    /**
     * Generated from protobuf field <code>optional int64 MinFileSizeKB = 5;</code>
     * @param int|string $var
     * @return $this
     */
    public function setMinFileSizeKB($var)
    {
        GPBUtil::checkInt64($var);
        $this->MinFileSizeKB = $var;

        return $this;
    }

}

