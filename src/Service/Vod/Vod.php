<?php
# Code generated by protoc-gen-volcengine-sdk
# source: Vod
# DO NOT EDIT!

namespace Volc\Service\Vod;

use Exception;
use Throwable;
use Volc\Base\V4Curl;
use Volc\Service\Vod\Models\Request\VodGetDirectEditProgressRequest;
use Volc\Service\Vod\Models\Request\VodGetDirectEditResultRequest;
use Volc\Service\Vod\Models\Response\VodGetDirectEditProgressResponse;
use Volc\Service\Vod\Models\Response\VodGetDirectEditResultResponse;
use Volc\Service\Vod\Models\Request\VodSubmitDirectEditTaskAsyncRequest;
use Volc\Service\Vod\Models\Response\VodSubmitDirectEditTaskAsyncResponse;
use Volc\Service\Vod\Models\Request\VodSubmitDirectEditTaskSyncRequest;
use Volc\Service\Vod\Models\Response\VodSubmitDirectEditTaskSyncResponse;
use Volc\Service\Vod\Models\Request\VodCancelDirectEditTaskRequest;
use Volc\Service\Vod\Models\Response\VodCancelDirectEditTaskResponse;
use Volc\Service\Vod\Upload\UploadPolicy;
use Volc\Service\Vod\Models\Request\VodGetAllPlayInfoRequest;
use Volc\Service\Vod\Models\Response\VodGetAllPlayInfoResponse;
use Volc\Service\Vod\Models\Request\VodGetPlayInfoRequest;
use Volc\Service\Vod\Models\Response\VodGetPlayInfoResponse;
use Volc\Service\Vod\Models\Request\VodGetPrivateDrmPlayAuthRequest;
use Volc\Service\Vod\Models\Response\VodGetPrivateDrmPlayAuthResponse;
use Volc\Service\Vod\Models\Request\VodGetHlsDecryptionKeyRequest;
use Volc\Service\Vod\Models\Response\VodGetHlsDecryptionKeyResponse;
use Volc\Service\Vod\Models\Request\VodGetPlayInfoWithLiveTimeShiftSceneRequest;
use Volc\Service\Vod\Models\Response\VodGetPlayInfoWithLiveTimeShiftSceneResponse;
use Volc\Service\Vod\Models\Request\VodSubmitMoveObjectTaskRequest;
use Volc\Service\Vod\Models\Response\VodSubmitMoveObjectTaskResponse;
use Volc\Service\Vod\Models\Request\VodQueryMoveObjectTaskInfoRequest;
use Volc\Service\Vod\Models\Response\VodQueryMoveObjectTaskInfoResponse;
use Volc\Service\Vod\Models\Request\VodSubmitBlockObjectTasksRequest;
use Volc\Service\Vod\Models\Response\VodSubmitBlockObjectTasksResponse;
use Volc\Service\Vod\Models\Request\VodListBlockObjectTasksRequest;
use Volc\Service\Vod\Models\Response\VodListBlockObjectTasksResponse;
use Volc\Service\Vod\Models\Request\VodUrlUploadRequest;
use Volc\Service\Vod\Models\Response\VodUrlUploadResponse;
use Volc\Service\Vod\Models\Request\VodQueryUploadTaskInfoRequest;
use Volc\Service\Vod\Models\Response\VodQueryUploadTaskInfoResponse;
use Volc\Service\Vod\Models\Request\VodApplyUploadInfoRequest;
use Volc\Service\Vod\Models\Response\VodApplyUploadInfoResponse;
use Volc\Service\Vod\Models\Request\VodCommitUploadInfoRequest;
use Volc\Service\Vod\Models\Response\VodCommitUploadInfoResponse;
use Volc\Service\Vod\Models\Request\VodListFileMetaInfosByFileNamesRequest;
use Volc\Service\Vod\Models\Response\VodListFileMetaInfosByFileNamesResponse;
use Volc\Service\Vod\Models\Request\VodUpdateMediaInfoRequest;
use Volc\Service\Vod\Models\Response\VodUpdateMediaInfoResponse;
use Volc\Service\Vod\Models\Request\VodUpdateMediaPublishStatusRequest;
use Volc\Service\Vod\Models\Response\VodUpdateMediaPublishStatusResponse;
use Volc\Service\Vod\Models\Request\VodUpdateMediaStorageClassRequest;
use Volc\Service\Vod\Models\Response\VodUpdateMediaStorageClassResponse;
use Volc\Service\Vod\Models\Request\VodGetMediaInfosRequest;
use Volc\Service\Vod\Models\Response\VodGetMediaInfosResponse;
use Volc\Service\Vod\Models\Request\VodGetRecommendedPosterRequest;
use Volc\Service\Vod\Models\Response\VodGetRecommendedPosterResponse;
use Volc\Service\Vod\Models\Request\VodDeleteMediaRequest;
use Volc\Service\Vod\Models\Response\VodDeleteMediaResponse;
use Volc\Service\Vod\Models\Request\VodDeleteTranscodesRequest;
use Volc\Service\Vod\Models\Response\VodDeleteTranscodesResponse;
use Volc\Service\Vod\Models\Request\VodGetFileInfosRequest;
use Volc\Service\Vod\Models\Response\VodGetFileInfosResponse;
use Volc\Service\Vod\Models\Request\VodUpdateFileStorageClassRequest;
use Volc\Service\Vod\Models\Response\VodUpdateFileStorageClassResponse;
use Volc\Service\Vod\Models\Request\VodDeleteMediaTosFileRequest;
use Volc\Service\Vod\Models\Response\VodDeleteMediaTosFileResponse;
use Volc\Service\Vod\Models\Request\VodGetMediaListRequest;
use Volc\Service\Vod\Models\Response\VodGetMediaListResponse;
use Volc\Service\Vod\Models\Request\VodDeleteMaterialRequest;
use Volc\Service\Vod\Models\Response\VodDeleteMaterialResponse;
use Volc\Service\Vod\Models\Request\VodGetSubtitleInfoListRequest;
use Volc\Service\Vod\Models\Response\VodGetSubtitleInfoListResponse;
use Volc\Service\Vod\Models\Request\VodUpdateSubtitleStatusRequest;
use Volc\Service\Vod\Models\Response\VodUpdateSubtitleStatusResponse;
use Volc\Service\Vod\Models\Request\VodUpdateSubtitleInfoRequest;
use Volc\Service\Vod\Models\Response\VodUpdateSubtitleInfoResponse;
use Volc\Service\Vod\Models\Request\VodGetAuditFramesForAuditRequest;
use Volc\Service\Vod\Models\Response\VodGetAuditFramesForAuditResponse;
use Volc\Service\Vod\Models\Request\VodGetMLFramesForAuditRequest;
use Volc\Service\Vod\Models\Response\VodGetMLFramesForAuditResponse;
use Volc\Service\Vod\Models\Request\VodGetBetterFramesForAuditRequest;
use Volc\Service\Vod\Models\Response\VodGetBetterFramesForAuditResponse;
use Volc\Service\Vod\Models\Request\VodGetAudioInfoForAuditRequest;
use Volc\Service\Vod\Models\Response\VodGetAudioInfoForAuditResponse;
use Volc\Service\Vod\Models\Request\VodGetAutomaticSpeechRecognitionForAuditRequest;
use Volc\Service\Vod\Models\Response\VodGetAutomaticSpeechRecognitionForAuditResponse;
use Volc\Service\Vod\Models\Request\VodGetAudioEventDetectionForAuditRequest;
use Volc\Service\Vod\Models\Response\VodGetAudioEventDetectionForAuditResponse;
use Volc\Service\Vod\Models\Request\VodCreateVideoClassificationRequest;
use Volc\Service\Vod\Models\Response\VodCreateVideoClassificationResponse;
use Volc\Service\Vod\Models\Request\VodUpdateVideoClassificationRequest;
use Volc\Service\Vod\Models\Response\VodUpdateVideoClassificationResponse;
use Volc\Service\Vod\Models\Request\VodDeleteVideoClassificationRequest;
use Volc\Service\Vod\Models\Response\VodDeleteVideoClassificationResponse;
use Volc\Service\Vod\Models\Request\VodListVideoClassificationsRequest;
use Volc\Service\Vod\Models\Response\VodListVideoClassificationsResponse;
use Volc\Service\Vod\Models\Request\VodListSnapshotsRequest;
use Volc\Service\Vod\Models\Response\VodListSnapshotsResponse;
use Volc\Service\Vod\Models\Request\VodExtractMediaMetaTaskRequest;
use Volc\Service\Vod\Models\Response\VodExtractMediaMetaTaskResponse;
use Volc\Service\Vod\Models\Request\VodStartWorkflowRequest;
use Volc\Service\Vod\Models\Response\VodStartWorkflowResponse;
use Volc\Service\Vod\Models\Request\VodRetrieveTranscodeResultRequest;
use Volc\Service\Vod\Models\Response\VodRetrieveTranscodeResultResponse;
use Volc\Service\Vod\Models\Request\VodGetWorkflowExecutionStatusRequest;
use Volc\Service\Vod\Models\Response\VodGetWorkflowExecutionStatusResponse;
use Volc\Service\Vod\Models\Request\VodGetWorkflowResultRequest;
use Volc\Service\Vod\Models\Response\VodGetWorkflowResultResponse;
use Volc\Service\Vod\Models\Request\VodCreateTaskTemplateRequest;
use Volc\Service\Vod\Models\Response\VodCreateTaskTemplateResponse;
use Volc\Service\Vod\Models\Request\VodUpdateTaskTemplateRequest;
use Volc\Service\Vod\Models\Response\VodUpdateTaskTemplateResponse;
use Volc\Service\Vod\Models\Request\VodGetTaskTemplateRequest;
use Volc\Service\Vod\Models\Response\VodGetTaskTemplateResponse;
use Volc\Service\Vod\Models\Request\VodListTaskTemplateRequest;
use Volc\Service\Vod\Models\Response\VodListTaskTemplateResponse;
use Volc\Service\Vod\Models\Request\VodDeleteTaskTemplateRequest;
use Volc\Service\Vod\Models\Response\VodDeleteTaskTemplateResponse;
use Volc\Service\Vod\Models\Request\VodCreateWorkflowTemplateRequest;
use Volc\Service\Vod\Models\Response\VodCreateWorkflowTemplateResponse;
use Volc\Service\Vod\Models\Request\VodUpdateWorkflowTemplateRequest;
use Volc\Service\Vod\Models\Response\VodUpdateWorkflowTemplateResponse;
use Volc\Service\Vod\Models\Request\VodGetWorkflowTemplateRequest;
use Volc\Service\Vod\Models\Response\VodGetWorkflowTemplateResponse;
use Volc\Service\Vod\Models\Request\VodListWorkflowTemplateRequest;
use Volc\Service\Vod\Models\Response\VodListWorkflowTemplateResponse;
use Volc\Service\Vod\Models\Request\VodDeleteWorkflowTemplateRequest;
use Volc\Service\Vod\Models\Response\VodDeleteWorkflowTemplateResponse;
use Volc\Service\Vod\Models\Request\VodCreateWatermarkRequest;
use Volc\Service\Vod\Models\Response\VodCreateWatermarkResponse;
use Volc\Service\Vod\Models\Request\VodUpdateWatermarkRequest;
use Volc\Service\Vod\Models\Response\VodUpdateWatermarkResponse;
use Volc\Service\Vod\Models\Request\VodGetWatermarkRequest;
use Volc\Service\Vod\Models\Response\VodGetWatermarkResponse;
use Volc\Service\Vod\Models\Request\VodListWatermarkRequest;
use Volc\Service\Vod\Models\Response\VodListWatermarkResponse;
use Volc\Service\Vod\Models\Request\VodDeleteWatermarkRequest;
use Volc\Service\Vod\Models\Response\VodDeleteWatermarkResponse;
use Volc\Service\Vod\Models\Request\VodDeleteSpaceRequest;
use Volc\Service\Vod\Models\Response\VodDeleteSpaceResponse;
use Volc\Service\Vod\Models\Request\VodCreateSpaceRequest;
use Volc\Service\Vod\Models\Response\VodCreateSpaceResponse;
use Volc\Service\Vod\Models\Request\VodListSpaceRequest;
use Volc\Service\Vod\Models\Response\VodListSpaceResponse;
use Volc\Service\Vod\Models\Request\VodGetSpaceDetailRequest;
use Volc\Service\Vod\Models\Response\VodGetSpaceDetailResponse;
use Volc\Service\Vod\Models\Request\VodUpdateSpaceRequest;
use Volc\Service\Vod\Models\Response\VodUpdateSpaceResponse;
use Volc\Service\Vod\Models\Request\VodUpdateSpaceUploadConfigRequest;
use Volc\Service\Vod\Models\Response\VodUpdateSpaceUploadConfigResponse;
use Volc\Service\Vod\Models\Request\VodAddDomainToSchedulerRequest;
use Volc\Service\Vod\Models\Response\VodAddDomainToSchedulerResponse;
use Volc\Service\Vod\Models\Request\VodRemoveDomainFromSchedulerRequest;
use Volc\Service\Vod\Models\Response\VodRemoveDomainFromSchedulerResponse;
use Volc\Service\Vod\Models\Request\VodUpdateDomainPlayRuleRequest;
use Volc\Service\Vod\Models\Response\VodUpdateDomainPlayRuleResponse;
use Volc\Service\Vod\Models\Request\VodStartDomainRequest;
use Volc\Service\Vod\Models\Response\VodStartDomainResponse;
use Volc\Service\Vod\Models\Request\VodStopDomainRequest;
use Volc\Service\Vod\Models\Response\VodStopDomainResponse;
use Volc\Service\Vod\Models\Request\VodDeleteDomainRequest;
use Volc\Service\Vod\Models\Response\VodDeleteDomainResponse;
use Volc\Service\Vod\Models\Request\VodListDomainRequest;
use Volc\Service\Vod\Models\Response\VodListDomainResponse;
use Volc\Service\Vod\Models\Request\VodCreateCdnRefreshTaskRequest;
use Volc\Service\Vod\Models\Response\VodCreateCdnRefreshTaskResponse;
use Volc\Service\Vod\Models\Request\VodCreateCdnPreloadTaskRequest;
use Volc\Service\Vod\Models\Response\VodCreateCdnPreloadTaskResponse;
use Volc\Service\Vod\Models\Request\VodListCdnTasksRequest;
use Volc\Service\Vod\Models\Response\VodListCdnTasksResponse;
use Volc\Service\Vod\Models\Request\VodListCdnAccessLogRequest;
use Volc\Service\Vod\Models\Response\VodListCdnAccessLogResponse;
use Volc\Service\Vod\Models\Request\VodListCdnTopAccessUrlRequest;
use Volc\Service\Vod\Models\Response\VodListCdnTopAccessUrlResponse;
use Volc\Service\Vod\Models\Request\VodListCdnTopAccessRequest;
use Volc\Service\Vod\Models\Response\VodListCdnTopAccessResponse;
use Volc\Service\Vod\Models\Request\VodListCdnUsageDataRequest;
use Volc\Service\Vod\Models\Response\VodCdnStatisticsCommonResponse;
use Volc\Service\Vod\Models\Request\VodListCdnStatusDataRequest;
use Volc\Service\Vod\Models\Request\VodDescribeIPInfoRequest;
use Volc\Service\Vod\Models\Response\VodDescribeIPInfoResponse;
use Volc\Service\Vod\Models\Request\VodListCdnPvDataRequest;
use Volc\Service\Vod\Models\Request\VodSubmitBlockTasksRequest;
use Volc\Service\Vod\Models\Response\VodSubmitBlockTasksResponse;
use Volc\Service\Vod\Models\Request\VodGetContentBlockTasksRequest;
use Volc\Service\Vod\Models\Response\VodGetContentBlockTasksResponse;
use Volc\Service\Vod\Models\Request\VodCreateDomainV2Request;
use Volc\Service\Vod\Models\Response\VodCreateDomainV2Response;
use Volc\Service\Vod\Models\Request\VodUpdateDomainExpireV2Request;
use Volc\Service\Vod\Models\Response\VodUpdateDomainExpireV2Response;
use Volc\Service\Vod\Models\Request\VodUpdateDomainAuthConfigV2Request;
use Volc\Service\Vod\Models\Response\VodUpdateDomainAuthConfigV2Response;
use Volc\Service\Vod\Models\Request\AddOrUpdateCertificateV2Request;
use Volc\Service\Vod\Models\Response\AddOrUpdateCertificateV2Response;
use Volc\Service\Vod\Models\Request\VodUpdateDomainUrlAuthConfigV2Request;
use Volc\Service\Vod\Models\Response\VodUpdateDomainUrlAuthConfigV2Response;
use Volc\Service\Vod\Models\Request\VodUpdateDomainConfigRequest;
use Volc\Service\Vod\Models\Response\VodUpdateDomainConfigResponse;
use Volc\Service\Vod\Models\Request\VodDescribeDomainConfigRequest;
use Volc\Service\Vod\Models\Response\VodDescribeDomainConfigResponse;
use Volc\Service\Vod\Models\Request\VodAddCallbackSubscriptionRequest;
use Volc\Service\Vod\Models\Response\VodAddCallbackSubscriptionResponse;
use Volc\Service\Vod\Models\Request\VodSetCallbackEventRequest;
use Volc\Service\Vod\Models\Response\VodSetCallbackEventResponse;
use Volc\Service\Vod\Models\Request\VodGetSmartStrategyLitePlayInfoRequest;
use Volc\Service\Vod\Models\Response\VodGetSmartStrategyLitePlayInfoResponse;
use Volc\Service\Vod\Models\Request\VodGetAppInfoRequest;
use Volc\Service\Vod\Models\Response\VodGetAppInfoResponse;
use Volc\Service\Vod\Models\Request\DescribeVodSpaceTranscodeDataRequest;
use Volc\Service\Vod\Models\Response\DescribeVodSpaceTranscodeDataResponse;
use Volc\Service\Vod\Models\Request\DescribeVodSpaceAIStatisDataRequest;
use Volc\Service\Vod\Models\Response\DescribeVodSpaceAIStatisDataResponse;
use Volc\Service\Vod\Models\Request\DescribeVodSpaceSubtitleStatisDataRequest;
use Volc\Service\Vod\Models\Response\DescribeVodSpaceSubtitleStatisDataResponse;
use Volc\Service\Vod\Models\Request\DescribeVodSpaceDetectStatisDataRequest;
use Volc\Service\Vod\Models\Response\DescribeVodSpaceDetectStatisDataResponse;
use Volc\Service\Vod\Models\Request\DescribeVodSpaceWorkflowDetailDataRequest;
use Volc\Service\Vod\Models\Response\DescribeVodSpaceWorkflowDetailDataResponse;
use Volc\Service\Vod\Models\Request\DescribeVodSpaceEditDetailDataRequest;
use Volc\Service\Vod\Models\Response\DescribeVodSpaceEditDetailDataResponse;
use Volc\Service\Vod\Models\Request\DescribeVodSnapshotDataRequest;
use Volc\Service\Vod\Models\Response\DescribeVodSnapshotDataResponse;
use Volc\Service\Vod\Models\Request\VodDescribeVodSpaceStorageDataRequest;
use Volc\Service\Vod\Models\Response\VodDescribeVodSpaceStorageDataResponse;
use Volc\Service\Vod\Models\Request\VodDescribeVodDomainTrafficDataRequest;
use Volc\Service\Vod\Models\Response\VodDescribeVodDomainTrafficDataResponse;
use Volc\Service\Vod\Models\Request\VodDescribeVodDomainBandwidthDataRequest;
use Volc\Service\Vod\Models\Response\VodDescribeVodDomainBandwidthDataResponse;
use Volc\Service\Vod\Models\Request\DescribeVodEnhanceImageDataRequest;
use Volc\Service\Vod\Models\Response\DescribeVodEnhanceImageDataResponse;
use Volc\Service\Vod\Models\Request\DescribeVodSpaceEditStatisDataRequest;
use Volc\Service\Vod\Models\Response\DescribeVodSpaceEditStatisDataResponse;
use Volc\Service\Vod\Models\Request\DescribeVodPlayedStatisDataRequest;
use Volc\Service\Vod\Models\Response\DescribeVodPlayedStatisDataResponse;
use Volc\Service\Vod\Models\Request\DescribeVodMostPlayedStatisDataRequest;
use Volc\Service\Vod\Models\Response\DescribeVodMostPlayedStatisDataResponse;
use Volc\Service\Vod\Models\Request\DescribeVodRealtimeMediaDataRequest;
use Volc\Service\Vod\Models\Response\DescribeVodRealtimeMediaDataResponse;
use Volc\Service\Vod\Models\Request\DescribeVodRealtimeMediaDetailDataRequest;
use Volc\Service\Vod\Models\Response\DescribeVodRealtimeMediaDetailDataResponse;
use Volc\Service\Vod\Models\Request\DescribeVodVidTrafficFileLogRequest;
use Volc\Service\Vod\Models\Response\DescribeVodVidTrafficFileLogResponse;

/**
 * Generated from protobuf service <code>volcengine/vod/service/service_vod.proto</code>
 */
class Vod extends V4Curl
{

    protected $apiList;

    public function __construct()
    {
        $this->region = func_get_arg(0);
        $this->apiList = VodOption::$apiList;
        parent::__construct($this->region);
    }

    /**
     * @throws Exception
     */
    protected function getConfig(string $region): array
    {
        try {
            return VodOption::getConfig($region);
        } catch (Exception $e) {
            print_r($e->getMessage());
            print_r($e->getTraceAsString());
            throw $e;
        }
    }

    /**
     * @throws Throwable
     */
    public function getPlayAuthToken(VodGetPlayInfoRequest $req, int $expireSeconds): string
    {
        try {
            $query = VodUtils::formatRequestParam($req);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($expireSeconds > 0) {
            $query["X-Expires"] = $expireSeconds;
        }
        $token = ["TokenVersion" => "V2"];
        $token["GetPlayInfoToken"] = parse_url($this->getRequestUrl("GetPlayInfo", ['query' => $query]))['query'];
        return base64_encode(json_encode($token));
    }

    /**
     * @throws Throwable
     */
    public function getSubtitleAuthToken(VodGetSubtitleInfoListRequest $req, int $expireSeconds): string
    {
        try {
            if($req->getVid() == ""){
                throw new Exception("传入的Vid为空");
            }
            $query = array("Vid"=>$req->getVid());
            $query["Status"] = "Published";
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($expireSeconds > 0) {
            $query["X-Expires"] = $expireSeconds;
        }
        $token["GetSubtitleAuthToken"] = parse_url($this->getRequestUrl("GetSubtitleInfoList", ['query' => $query]))['query'];
        return base64_encode(json_encode($token));
    }
	
    public function getUploadVideoAuth(array $spaceNames = array(), string $keyPtn = '', UploadPolicy $uploadPolicy = null): array
    {
        return $this->getUploadVideoAuthWithExpiredTime(60 * 60, $spaceNames,$keyPtn,$uploadPolicy);
    }

    public function getUploadVideoAuthWithExpiredTime(int $expire, array $spaceNames = array(), string $keyPtn = '', UploadPolicy $uploadPolicy = null): array
    {
        $spaceRes = [];
        if (sizeof($spaceNames) != 0) {
            foreach ($spaceNames as $space) {
                $spaceRes[] = sprintf(ResourceSpaceNameTRN, $space);
            }
        }
        $resources = [];

        $statements = [];
        $statements[] = $this->newAllowStatement([ActionApplyUpload], $spaceRes);
        $statements[] = $this->newAllowStatement([ActionCommitUpload], $resources);

        if ($keyPtn != ''){
            $statements[] = $this->newAllowStatement(['FileNamePtn'], [$keyPtn]);
        }
        if ($uploadPolicy != null){
            $statements[] = $this->newAllowStatement(['UploadPolicy'], [json_encode($uploadPolicy)]);
        }
        $policy = [
            Statement => $statements,
        ];
        return $this->signSts2($policy, $expire);
    }

    /**
     * @throws Throwable
     */
    public function getSHA1HlsDrmAuthToken(int $expireSeconds): string
    {
        return $this->createHlsDrmAuthToken("HMAC-SHA1", $expireSeconds);
    }

    /**
     * @throws Throwable
     */
    public function getPrivateDrmPlayAuthToken(VodGetPrivateDrmPlayAuthRequest $req, int $expireSeconds): string
    {
        try {
            $query = VodUtils::formatRequestParam($req);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($expireSeconds > 0) {
            $query["X-Expires"] = $expireSeconds;
        }
        return parse_url($this->getRequestUrl("GetPrivateDrmPlayAuth", ['query' => $query]))['query'];
    }


    /**
     * SubmitDirectEditTaskAsync.
     *
     * @param $req VodSubmitDirectEditTaskAsyncRequest
     * @return VodSubmitDirectEditTaskAsyncResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function submitDirectEditTaskAsync(VodSubmitDirectEditTaskAsyncRequest $req): VodSubmitDirectEditTaskAsyncResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $query["EditParam"] = json_decode($req->getEditParam());
            $response = $this->request('SubmitDirectEditTaskAsync', ['json' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodSubmitDirectEditTaskAsyncResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * SubmitDirectEditTaskSync.
     *
     * @param $req VodSubmitDirectEditTaskSyncRequest
     * @return VodSubmitDirectEditTaskSyncResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function submitDirectEditTaskSync(VodSubmitDirectEditTaskSyncRequest $req): VodSubmitDirectEditTaskSyncResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $query["EditParam"] = json_decode($req->getEditParam());
            $response = $this->request('SubmitDirectEditTaskSync', ['json' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodSubmitDirectEditTaskSyncResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * GetDirectEditResult.
     *
     * @param $req VodGetDirectEditResultRequest
     * @return VodGetDirectEditResultResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function getDirectEditResult(VodGetDirectEditResultRequest $req): VodGetDirectEditResultResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $query["ReqIds"] = json_decode($query["ReqIds"]);
            $response = $this->request('GetDirectEditResult', ['json' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodGetDirectEditResultResponse();
        try {
            $tmp = json_decode($response->getBody());
            foreach ($tmp->Result as $value) {
                $value->EditParam = base64_encode(json_encode($value->EditParam));
            }
            try {
                $respData->mergeFromJsonString(json_encode($tmp), true);
            } catch (Exception $e) {
                echo $e, "\n";
                if ($respData->getResponseMetadata() == null) {
                    throw new Exception($response->getReasonPhrase());
                }
            } catch (Throwable $t) {
                echo $t, "\n";
                if ($respData->getResponseMetadata() == null) {
                    throw new Exception($response->getReasonPhrase());
                }
            }
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * GetDirectEditProgress.
     *
     * @param $req VodGetDirectEditProgressRequest
     * @return VodGetDirectEditProgressResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function getDirectEditProgress(VodGetDirectEditProgressRequest $req): VodGetDirectEditProgressResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('GetDirectEditProgress', ['query' => $query]);
            $json_decode = json_decode($response->getBody());
            $res = null;
            if (!empty($json_decode->Result)) {
                $res = $json_decode->Result;
            }
            $resp = new class($json_decode->ResponseMetadata, $res) {
                public function __construct($ResponseMetadata, $Result)
                {
                    $this->ResponseMetadata = $ResponseMetadata;
                    $this->Result = new class($Result) {
                        public $Result;

                        public function __construct($Result)
                        {
                            $this->Result = $Result;
                        }
                    };
                }

                public $ResponseMetadata = null;
                public $Result = null;

                public function getBody()
                {
                    return json_encode($this);
                }
            };
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodGetDirectEditProgressResponse();
        try {
            $respData = VodUtils::parseResponseData($resp, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }

    /**
     * CancelDirectEditTask.
     *
     * @param $req VodCancelDirectEditTaskRequest
     * @return VodCancelDirectEditTaskResponse
     * @throws Exception the exception
     * @throws Throwable the exception
     */
    public function cancelDirectEditTask(VodCancelDirectEditTaskRequest $req): VodCancelDirectEditTaskResponse
    {
        try {
            $query = VodUtils::formatRequestParam($req);
            $response = $this->request('CancelDirectEditTask', ['json' => $query]);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        if ($response->getStatusCode() != 200) {
            echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
        }
        $respData = new VodCancelDirectEditTaskResponse();
        try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
    }


	/**
     * GetAllPlayInfo.
     *
     * @param $req VodGetAllPlayInfoRequest
     * @return VodGetAllPlayInfoResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getAllPlayInfo (VodGetAllPlayInfoRequest $req): VodGetAllPlayInfoResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetAllPlayInfo', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetAllPlayInfoResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetPlayInfo.
     *
     * @param $req VodGetPlayInfoRequest
     * @return VodGetPlayInfoResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getPlayInfo (VodGetPlayInfoRequest $req): VodGetPlayInfoResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetPlayInfo', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetPlayInfoResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetPrivateDrmPlayAuth.
     *
     * @param $req VodGetPrivateDrmPlayAuthRequest
     * @return VodGetPrivateDrmPlayAuthResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getPrivateDrmPlayAuth (VodGetPrivateDrmPlayAuthRequest $req): VodGetPrivateDrmPlayAuthResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetPrivateDrmPlayAuth', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetPrivateDrmPlayAuthResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetHlsDecryptionKey.
     *
     * @param $req VodGetHlsDecryptionKeyRequest
     * @return VodGetHlsDecryptionKeyResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getHlsDecryptionKey (VodGetHlsDecryptionKeyRequest $req): VodGetHlsDecryptionKeyResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetHlsDecryptionKey', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetHlsDecryptionKeyResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetPlayInfoWithLiveTimeShiftScene.
     *
     * @param $req VodGetPlayInfoWithLiveTimeShiftSceneRequest
     * @return VodGetPlayInfoWithLiveTimeShiftSceneResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getPlayInfoWithLiveTimeShiftScene (VodGetPlayInfoWithLiveTimeShiftSceneRequest $req): VodGetPlayInfoWithLiveTimeShiftSceneResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetPlayInfoWithLiveTimeShiftScene', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetPlayInfoWithLiveTimeShiftSceneResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * SubmitMoveObjectTask.
     *
     * @param $req VodSubmitMoveObjectTaskRequest
     * @return VodSubmitMoveObjectTaskResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function submitMoveObjectTask (VodSubmitMoveObjectTaskRequest $req): VodSubmitMoveObjectTaskResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('SubmitMoveObjectTask', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodSubmitMoveObjectTaskResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * QueryMoveObjectTaskInfo.
     *
     * @param $req VodQueryMoveObjectTaskInfoRequest
     * @return VodQueryMoveObjectTaskInfoResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function queryMoveObjectTaskInfo (VodQueryMoveObjectTaskInfoRequest $req): VodQueryMoveObjectTaskInfoResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('QueryMoveObjectTaskInfo', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodQueryMoveObjectTaskInfoResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * SubmitBlockObjectTasks.
     *
     * @param $req VodSubmitBlockObjectTasksRequest
     * @return VodSubmitBlockObjectTasksResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function submitBlockObjectTasks (VodSubmitBlockObjectTasksRequest $req): VodSubmitBlockObjectTasksResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('SubmitBlockObjectTasks', ['form_params' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodSubmitBlockObjectTasksResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * ListBlockObjectTasks.
     *
     * @param $req VodListBlockObjectTasksRequest
     * @return VodListBlockObjectTasksResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function listBlockObjectTasks (VodListBlockObjectTasksRequest $req): VodListBlockObjectTasksResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('ListBlockObjectTasks', ['form_params' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodListBlockObjectTasksResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * UploadMediaByUrl.
     *
     * @param $req VodUrlUploadRequest
     * @return VodUrlUploadResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function uploadMediaByUrl (VodUrlUploadRequest $req): VodUrlUploadResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('UploadMediaByUrl', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodUrlUploadResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * QueryUploadTaskInfo.
     *
     * @param $req VodQueryUploadTaskInfoRequest
     * @return VodQueryUploadTaskInfoResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function queryUploadTaskInfo (VodQueryUploadTaskInfoRequest $req): VodQueryUploadTaskInfoResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('QueryUploadTaskInfo', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodQueryUploadTaskInfoResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * ApplyUploadInfo.
     *
     * @param $req VodApplyUploadInfoRequest
     * @return VodApplyUploadInfoResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function applyUploadInfo (VodApplyUploadInfoRequest $req): VodApplyUploadInfoResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('ApplyUploadInfo', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodApplyUploadInfoResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * CommitUploadInfo.
     *
     * @param $req VodCommitUploadInfoRequest
     * @return VodCommitUploadInfoResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function commitUploadInfo (VodCommitUploadInfoRequest $req): VodCommitUploadInfoResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('CommitUploadInfo', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodCommitUploadInfoResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * ListFileMetaInfosByFileNames.
     *
     * @param $req VodListFileMetaInfosByFileNamesRequest
     * @return VodListFileMetaInfosByFileNamesResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function listFileMetaInfosByFileNames (VodListFileMetaInfosByFileNamesRequest $req): VodListFileMetaInfosByFileNamesResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('ListFileMetaInfosByFileNames', ['form_params' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodListFileMetaInfosByFileNamesResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * UpdateMediaInfo.
     *
     * @param $req VodUpdateMediaInfoRequest
     * @return VodUpdateMediaInfoResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function updateMediaInfo (VodUpdateMediaInfoRequest $req): VodUpdateMediaInfoResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('UpdateMediaInfo', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodUpdateMediaInfoResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * UpdateMediaPublishStatus.
     *
     * @param $req VodUpdateMediaPublishStatusRequest
     * @return VodUpdateMediaPublishStatusResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function updateMediaPublishStatus (VodUpdateMediaPublishStatusRequest $req): VodUpdateMediaPublishStatusResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('UpdateMediaPublishStatus', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodUpdateMediaPublishStatusResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * UpdateMediaStorageClass.
     *
     * @param $req VodUpdateMediaStorageClassRequest
     * @return VodUpdateMediaStorageClassResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function updateMediaStorageClass (VodUpdateMediaStorageClassRequest $req): VodUpdateMediaStorageClassResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('UpdateMediaStorageClass', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodUpdateMediaStorageClassResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetMediaInfos.
     *
     * @param $req VodGetMediaInfosRequest
     * @return VodGetMediaInfosResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getMediaInfos (VodGetMediaInfosRequest $req): VodGetMediaInfosResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetMediaInfos', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetMediaInfosResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetMediaInfos20230701.
     *
     * @param $req VodGetMediaInfosRequest
     * @return VodGetMediaInfosResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getMediaInfos20230701 (VodGetMediaInfosRequest $req): VodGetMediaInfosResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetMediaInfos20230701', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetMediaInfosResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetRecommendedPoster.
     *
     * @param $req VodGetRecommendedPosterRequest
     * @return VodGetRecommendedPosterResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getRecommendedPoster (VodGetRecommendedPosterRequest $req): VodGetRecommendedPosterResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetRecommendedPoster', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetRecommendedPosterResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DeleteMedia.
     *
     * @param $req VodDeleteMediaRequest
     * @return VodDeleteMediaResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function deleteMedia (VodDeleteMediaRequest $req): VodDeleteMediaResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DeleteMedia', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodDeleteMediaResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DeleteTranscodes.
     *
     * @param $req VodDeleteTranscodesRequest
     * @return VodDeleteTranscodesResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function deleteTranscodes (VodDeleteTranscodesRequest $req): VodDeleteTranscodesResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DeleteTranscodes', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodDeleteTranscodesResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetFileInfos.
     *
     * @param $req VodGetFileInfosRequest
     * @return VodGetFileInfosResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getFileInfos (VodGetFileInfosRequest $req): VodGetFileInfosResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetFileInfos', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetFileInfosResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * UpdateFileStorageClass.
     *
     * @param $req VodUpdateFileStorageClassRequest
     * @return VodUpdateFileStorageClassResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function updateFileStorageClass (VodUpdateFileStorageClassRequest $req): VodUpdateFileStorageClassResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('UpdateFileStorageClass', ['form_params' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodUpdateFileStorageClassResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DeleteMediaTosFile.
     *
     * @param $req VodDeleteMediaTosFileRequest
     * @return VodDeleteMediaTosFileResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function deleteMediaTosFile (VodDeleteMediaTosFileRequest $req): VodDeleteMediaTosFileResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DeleteMediaTosFile', ['form_params' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodDeleteMediaTosFileResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetMediaList.
     *
     * @param $req VodGetMediaListRequest
     * @return VodGetMediaListResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getMediaList (VodGetMediaListRequest $req): VodGetMediaListResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetMediaList', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetMediaListResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DeleteMaterial.
     *
     * @param $req VodDeleteMaterialRequest
     * @return VodDeleteMaterialResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function deleteMaterial (VodDeleteMaterialRequest $req): VodDeleteMaterialResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DeleteMaterial', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodDeleteMaterialResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetSubtitleInfoList.
     *
     * @param $req VodGetSubtitleInfoListRequest
     * @return VodGetSubtitleInfoListResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getSubtitleInfoList (VodGetSubtitleInfoListRequest $req): VodGetSubtitleInfoListResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetSubtitleInfoList', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetSubtitleInfoListResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * UpdateSubtitleStatus.
     *
     * @param $req VodUpdateSubtitleStatusRequest
     * @return VodUpdateSubtitleStatusResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function updateSubtitleStatus (VodUpdateSubtitleStatusRequest $req): VodUpdateSubtitleStatusResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('UpdateSubtitleStatus', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodUpdateSubtitleStatusResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * UpdateSubtitleInfo.
     *
     * @param $req VodUpdateSubtitleInfoRequest
     * @return VodUpdateSubtitleInfoResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function updateSubtitleInfo (VodUpdateSubtitleInfoRequest $req): VodUpdateSubtitleInfoResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('UpdateSubtitleInfo', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodUpdateSubtitleInfoResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetAuditFramesForAudit.
     *
     * @param $req VodGetAuditFramesForAuditRequest
     * @return VodGetAuditFramesForAuditResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getAuditFramesForAudit (VodGetAuditFramesForAuditRequest $req): VodGetAuditFramesForAuditResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetAuditFramesForAudit', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetAuditFramesForAuditResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetMLFramesForAudit.
     *
     * @param $req VodGetMLFramesForAuditRequest
     * @return VodGetMLFramesForAuditResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getMLFramesForAudit (VodGetMLFramesForAuditRequest $req): VodGetMLFramesForAuditResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetMLFramesForAudit', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetMLFramesForAuditResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetBetterFramesForAudit.
     *
     * @param $req VodGetBetterFramesForAuditRequest
     * @return VodGetBetterFramesForAuditResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getBetterFramesForAudit (VodGetBetterFramesForAuditRequest $req): VodGetBetterFramesForAuditResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetBetterFramesForAudit', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetBetterFramesForAuditResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetAudioInfoForAudit.
     *
     * @param $req VodGetAudioInfoForAuditRequest
     * @return VodGetAudioInfoForAuditResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getAudioInfoForAudit (VodGetAudioInfoForAuditRequest $req): VodGetAudioInfoForAuditResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetAudioInfoForAudit', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetAudioInfoForAuditResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetAutomaticSpeechRecognitionForAudit.
     *
     * @param $req VodGetAutomaticSpeechRecognitionForAuditRequest
     * @return VodGetAutomaticSpeechRecognitionForAuditResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getAutomaticSpeechRecognitionForAudit (VodGetAutomaticSpeechRecognitionForAuditRequest $req): VodGetAutomaticSpeechRecognitionForAuditResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetAutomaticSpeechRecognitionForAudit', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetAutomaticSpeechRecognitionForAuditResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetAudioEventDetectionForAudit.
     *
     * @param $req VodGetAudioEventDetectionForAuditRequest
     * @return VodGetAudioEventDetectionForAuditResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getAudioEventDetectionForAudit (VodGetAudioEventDetectionForAuditRequest $req): VodGetAudioEventDetectionForAuditResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetAudioEventDetectionForAudit', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetAudioEventDetectionForAuditResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * CreateVideoClassification.
     *
     * @param $req VodCreateVideoClassificationRequest
     * @return VodCreateVideoClassificationResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function createVideoClassification (VodCreateVideoClassificationRequest $req): VodCreateVideoClassificationResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('CreateVideoClassification', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodCreateVideoClassificationResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * UpdateVideoClassification.
     *
     * @param $req VodUpdateVideoClassificationRequest
     * @return VodUpdateVideoClassificationResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function updateVideoClassification (VodUpdateVideoClassificationRequest $req): VodUpdateVideoClassificationResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('UpdateVideoClassification', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodUpdateVideoClassificationResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DeleteVideoClassification.
     *
     * @param $req VodDeleteVideoClassificationRequest
     * @return VodDeleteVideoClassificationResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function deleteVideoClassification (VodDeleteVideoClassificationRequest $req): VodDeleteVideoClassificationResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DeleteVideoClassification', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodDeleteVideoClassificationResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * ListVideoClassifications.
     *
     * @param $req VodListVideoClassificationsRequest
     * @return VodListVideoClassificationsResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function listVideoClassifications (VodListVideoClassificationsRequest $req): VodListVideoClassificationsResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('ListVideoClassifications', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodListVideoClassificationsResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * ListSnapshots.
     *
     * @param $req VodListSnapshotsRequest
     * @return VodListSnapshotsResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function listSnapshots (VodListSnapshotsRequest $req): VodListSnapshotsResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('ListSnapshots', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodListSnapshotsResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * ExtractMediaMetaTask.
     *
     * @param $req VodExtractMediaMetaTaskRequest
     * @return VodExtractMediaMetaTaskResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function extractMediaMetaTask (VodExtractMediaMetaTaskRequest $req): VodExtractMediaMetaTaskResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('ExtractMediaMetaTask', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodExtractMediaMetaTaskResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * StartWorkflow.
     *
     * @param $req VodStartWorkflowRequest
     * @return VodStartWorkflowResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function startWorkflow (VodStartWorkflowRequest $req): VodStartWorkflowResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('StartWorkflow', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodStartWorkflowResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * RetrieveTranscodeResult.
     *
     * @param $req VodRetrieveTranscodeResultRequest
     * @return VodRetrieveTranscodeResultResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function retrieveTranscodeResult (VodRetrieveTranscodeResultRequest $req): VodRetrieveTranscodeResultResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('RetrieveTranscodeResult', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodRetrieveTranscodeResultResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetWorkflowExecution.
     *
     * @param $req VodGetWorkflowExecutionStatusRequest
     * @return VodGetWorkflowExecutionStatusResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getWorkflowExecution (VodGetWorkflowExecutionStatusRequest $req): VodGetWorkflowExecutionStatusResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetWorkflowExecution', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetWorkflowExecutionStatusResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetWorkflowExecutionResult.
     *
     * @param $req VodGetWorkflowResultRequest
     * @return VodGetWorkflowResultResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getWorkflowExecutionResult (VodGetWorkflowResultRequest $req): VodGetWorkflowResultResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetWorkflowExecutionResult', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetWorkflowResultResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * CreateTaskTemplate.
     *
     * @param $req VodCreateTaskTemplateRequest
     * @return VodCreateTaskTemplateResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function createTaskTemplate (VodCreateTaskTemplateRequest $req): VodCreateTaskTemplateResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('CreateTaskTemplate', ['form_params' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodCreateTaskTemplateResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * UpdateTaskTemplate.
     *
     * @param $req VodUpdateTaskTemplateRequest
     * @return VodUpdateTaskTemplateResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function updateTaskTemplate (VodUpdateTaskTemplateRequest $req): VodUpdateTaskTemplateResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('UpdateTaskTemplate', ['form_params' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodUpdateTaskTemplateResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetTaskTemplate.
     *
     * @param $req VodGetTaskTemplateRequest
     * @return VodGetTaskTemplateResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getTaskTemplate (VodGetTaskTemplateRequest $req): VodGetTaskTemplateResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetTaskTemplate', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetTaskTemplateResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * ListTaskTemplate.
     *
     * @param $req VodListTaskTemplateRequest
     * @return VodListTaskTemplateResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function listTaskTemplate (VodListTaskTemplateRequest $req): VodListTaskTemplateResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('ListTaskTemplate', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodListTaskTemplateResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DeleteTaskTemplate.
     *
     * @param $req VodDeleteTaskTemplateRequest
     * @return VodDeleteTaskTemplateResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function deleteTaskTemplate (VodDeleteTaskTemplateRequest $req): VodDeleteTaskTemplateResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DeleteTaskTemplate', ['form_params' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodDeleteTaskTemplateResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * CreateWorkflowTemplate.
     *
     * @param $req VodCreateWorkflowTemplateRequest
     * @return VodCreateWorkflowTemplateResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function createWorkflowTemplate (VodCreateWorkflowTemplateRequest $req): VodCreateWorkflowTemplateResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('CreateWorkflowTemplate', ['form_params' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodCreateWorkflowTemplateResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * UpdateWorkflowTemplate.
     *
     * @param $req VodUpdateWorkflowTemplateRequest
     * @return VodUpdateWorkflowTemplateResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function updateWorkflowTemplate (VodUpdateWorkflowTemplateRequest $req): VodUpdateWorkflowTemplateResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('UpdateWorkflowTemplate', ['form_params' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodUpdateWorkflowTemplateResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetWorkflowTemplate.
     *
     * @param $req VodGetWorkflowTemplateRequest
     * @return VodGetWorkflowTemplateResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getWorkflowTemplate (VodGetWorkflowTemplateRequest $req): VodGetWorkflowTemplateResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetWorkflowTemplate', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetWorkflowTemplateResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * ListWorkflowTemplate.
     *
     * @param $req VodListWorkflowTemplateRequest
     * @return VodListWorkflowTemplateResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function listWorkflowTemplate (VodListWorkflowTemplateRequest $req): VodListWorkflowTemplateResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('ListWorkflowTemplate', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodListWorkflowTemplateResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DeleteWorkflowTemplate.
     *
     * @param $req VodDeleteWorkflowTemplateRequest
     * @return VodDeleteWorkflowTemplateResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function deleteWorkflowTemplate (VodDeleteWorkflowTemplateRequest $req): VodDeleteWorkflowTemplateResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DeleteWorkflowTemplate', ['form_params' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodDeleteWorkflowTemplateResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * CreateWatermarkTemplate.
     *
     * @param $req VodCreateWatermarkRequest
     * @return VodCreateWatermarkResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function createWatermarkTemplate (VodCreateWatermarkRequest $req): VodCreateWatermarkResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('CreateWatermarkTemplate', ['form_params' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodCreateWatermarkResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * UpdateWatermarkTemplate.
     *
     * @param $req VodUpdateWatermarkRequest
     * @return VodUpdateWatermarkResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function updateWatermarkTemplate (VodUpdateWatermarkRequest $req): VodUpdateWatermarkResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('UpdateWatermarkTemplate', ['form_params' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodUpdateWatermarkResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetWatermarkTemplate.
     *
     * @param $req VodGetWatermarkRequest
     * @return VodGetWatermarkResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getWatermarkTemplate (VodGetWatermarkRequest $req): VodGetWatermarkResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetWatermarkTemplate', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetWatermarkResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * ListWatermarkTemplate.
     *
     * @param $req VodListWatermarkRequest
     * @return VodListWatermarkResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function listWatermarkTemplate (VodListWatermarkRequest $req): VodListWatermarkResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('ListWatermarkTemplate', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodListWatermarkResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DeleteWatermarkTemplate.
     *
     * @param $req VodDeleteWatermarkRequest
     * @return VodDeleteWatermarkResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function deleteWatermarkTemplate (VodDeleteWatermarkRequest $req): VodDeleteWatermarkResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DeleteWatermarkTemplate', ['form_params' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodDeleteWatermarkResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DeleteSpace.
     *
     * @param $req VodDeleteSpaceRequest
     * @return VodDeleteSpaceResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function deleteSpace (VodDeleteSpaceRequest $req): VodDeleteSpaceResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DeleteSpace', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodDeleteSpaceResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * CreateSpace.
     *
     * @param $req VodCreateSpaceRequest
     * @return VodCreateSpaceResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function createSpace (VodCreateSpaceRequest $req): VodCreateSpaceResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('CreateSpace', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodCreateSpaceResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * ListSpace.
     *
     * @param $req VodListSpaceRequest
     * @return VodListSpaceResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function listSpace (VodListSpaceRequest $req): VodListSpaceResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('ListSpace', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodListSpaceResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetSpaceDetail.
     *
     * @param $req VodGetSpaceDetailRequest
     * @return VodGetSpaceDetailResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getSpaceDetail (VodGetSpaceDetailRequest $req): VodGetSpaceDetailResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetSpaceDetail', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetSpaceDetailResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * UpdateSpace.
     *
     * @param $req VodUpdateSpaceRequest
     * @return VodUpdateSpaceResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function updateSpace (VodUpdateSpaceRequest $req): VodUpdateSpaceResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('UpdateSpace', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodUpdateSpaceResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * UpdateSpaceUploadConfig.
     *
     * @param $req VodUpdateSpaceUploadConfigRequest
     * @return VodUpdateSpaceUploadConfigResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function updateSpaceUploadConfig (VodUpdateSpaceUploadConfigRequest $req): VodUpdateSpaceUploadConfigResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('UpdateSpaceUploadConfig', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodUpdateSpaceUploadConfigResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * AddDomainToScheduler.
     *
     * @param $req VodAddDomainToSchedulerRequest
     * @return VodAddDomainToSchedulerResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function addDomainToScheduler (VodAddDomainToSchedulerRequest $req): VodAddDomainToSchedulerResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('AddDomainToScheduler', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodAddDomainToSchedulerResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * RemoveDomainFromScheduler.
     *
     * @param $req VodRemoveDomainFromSchedulerRequest
     * @return VodRemoveDomainFromSchedulerResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function removeDomainFromScheduler (VodRemoveDomainFromSchedulerRequest $req): VodRemoveDomainFromSchedulerResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('RemoveDomainFromScheduler', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodRemoveDomainFromSchedulerResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * UpdateDomainPlayRule.
     *
     * @param $req VodUpdateDomainPlayRuleRequest
     * @return VodUpdateDomainPlayRuleResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function updateDomainPlayRule (VodUpdateDomainPlayRuleRequest $req): VodUpdateDomainPlayRuleResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('UpdateDomainPlayRule', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodUpdateDomainPlayRuleResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * StartDomain.
     *
     * @param $req VodStartDomainRequest
     * @return VodStartDomainResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function startDomain (VodStartDomainRequest $req): VodStartDomainResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('StartDomain', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodStartDomainResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * StopDomain.
     *
     * @param $req VodStopDomainRequest
     * @return VodStopDomainResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function stopDomain (VodStopDomainRequest $req): VodStopDomainResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('StopDomain', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodStopDomainResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DeleteDomain.
     *
     * @param $req VodDeleteDomainRequest
     * @return VodDeleteDomainResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function deleteDomain (VodDeleteDomainRequest $req): VodDeleteDomainResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DeleteDomain', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodDeleteDomainResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * ListDomain.
     *
     * @param $req VodListDomainRequest
     * @return VodListDomainResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function listDomain (VodListDomainRequest $req): VodListDomainResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('ListDomain', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodListDomainResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * CreateCdnRefreshTask.
     *
     * @param $req VodCreateCdnRefreshTaskRequest
     * @return VodCreateCdnRefreshTaskResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function createCdnRefreshTask (VodCreateCdnRefreshTaskRequest $req): VodCreateCdnRefreshTaskResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('CreateCdnRefreshTask', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodCreateCdnRefreshTaskResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * CreateCdnPreloadTask.
     *
     * @param $req VodCreateCdnPreloadTaskRequest
     * @return VodCreateCdnPreloadTaskResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function createCdnPreloadTask (VodCreateCdnPreloadTaskRequest $req): VodCreateCdnPreloadTaskResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('CreateCdnPreloadTask', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodCreateCdnPreloadTaskResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * ListCdnTasks.
     *
     * @param $req VodListCdnTasksRequest
     * @return VodListCdnTasksResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function listCdnTasks (VodListCdnTasksRequest $req): VodListCdnTasksResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('ListCdnTasks', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodListCdnTasksResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * ListCdnAccessLog.
     *
     * @param $req VodListCdnAccessLogRequest
     * @return VodListCdnAccessLogResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function listCdnAccessLog (VodListCdnAccessLogRequest $req): VodListCdnAccessLogResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('ListCdnAccessLog', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodListCdnAccessLogResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * ListCdnTopAccessUrl.
     *
     * @param $req VodListCdnTopAccessUrlRequest
     * @return VodListCdnTopAccessUrlResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function listCdnTopAccessUrl (VodListCdnTopAccessUrlRequest $req): VodListCdnTopAccessUrlResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('ListCdnTopAccessUrl', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodListCdnTopAccessUrlResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * ListCdnTopAccess.
     *
     * @param $req VodListCdnTopAccessRequest
     * @return VodListCdnTopAccessResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function listCdnTopAccess (VodListCdnTopAccessRequest $req): VodListCdnTopAccessResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('ListCdnTopAccess', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodListCdnTopAccessResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * ListCdnUsageData.
     *
     * @param $req VodListCdnUsageDataRequest
     * @return VodCdnStatisticsCommonResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function listCdnUsageData (VodListCdnUsageDataRequest $req): VodCdnStatisticsCommonResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('ListCdnUsageData', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodCdnStatisticsCommonResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * ListCdnStatusData.
     *
     * @param $req VodListCdnStatusDataRequest
     * @return VodCdnStatisticsCommonResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function listCdnStatusData (VodListCdnStatusDataRequest $req): VodCdnStatisticsCommonResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('ListCdnStatusData', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodCdnStatisticsCommonResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DescribeIpInfo.
     *
     * @param $req VodDescribeIPInfoRequest
     * @return VodDescribeIPInfoResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function describeIpInfo (VodDescribeIPInfoRequest $req): VodDescribeIPInfoResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DescribeIpInfo', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodDescribeIPInfoResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * ListCdnPvData.
     *
     * @param $req VodListCdnPvDataRequest
     * @return VodCdnStatisticsCommonResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function listCdnPvData (VodListCdnPvDataRequest $req): VodCdnStatisticsCommonResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('ListCdnPvData', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodCdnStatisticsCommonResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * SubmitBlockTasks.
     *
     * @param $req VodSubmitBlockTasksRequest
     * @return VodSubmitBlockTasksResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function submitBlockTasks (VodSubmitBlockTasksRequest $req): VodSubmitBlockTasksResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('SubmitBlockTasks', ['form_params' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodSubmitBlockTasksResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetContentBlockTasks.
     *
     * @param $req VodGetContentBlockTasksRequest
     * @return VodGetContentBlockTasksResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getContentBlockTasks (VodGetContentBlockTasksRequest $req): VodGetContentBlockTasksResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetContentBlockTasks', ['form_params' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetContentBlockTasksResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * CreateDomain.
     *
     * @param $req VodCreateDomainV2Request
     * @return VodCreateDomainV2Response
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function createDomain (VodCreateDomainV2Request $req): VodCreateDomainV2Response
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('CreateDomain', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodCreateDomainV2Response();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * UpdateDomainExpire.
     *
     * @param $req VodUpdateDomainExpireV2Request
     * @return VodUpdateDomainExpireV2Response
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function updateDomainExpire (VodUpdateDomainExpireV2Request $req): VodUpdateDomainExpireV2Response
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('UpdateDomainExpire', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodUpdateDomainExpireV2Response();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * UpdateDomainAuthConfig.
     *
     * @param $req VodUpdateDomainAuthConfigV2Request
     * @return VodUpdateDomainAuthConfigV2Response
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function updateDomainAuthConfig (VodUpdateDomainAuthConfigV2Request $req): VodUpdateDomainAuthConfigV2Response
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('UpdateDomainAuthConfig', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodUpdateDomainAuthConfigV2Response();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * AddOrUpdateCertificate.
     *
     * @param $req AddOrUpdateCertificateV2Request
     * @return AddOrUpdateCertificateV2Response
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function addOrUpdateCertificate (AddOrUpdateCertificateV2Request $req): AddOrUpdateCertificateV2Response
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('AddOrUpdateCertificate', ['form_params' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new AddOrUpdateCertificateV2Response();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * UpdateDomainUrlAuthConfig.
     *
     * @param $req VodUpdateDomainUrlAuthConfigV2Request
     * @return VodUpdateDomainUrlAuthConfigV2Response
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function updateDomainUrlAuthConfig (VodUpdateDomainUrlAuthConfigV2Request $req): VodUpdateDomainUrlAuthConfigV2Response
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('UpdateDomainUrlAuthConfig', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodUpdateDomainUrlAuthConfigV2Response();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * UpdateDomainConfig.
     *
     * @param $req VodUpdateDomainConfigRequest
     * @return VodUpdateDomainConfigResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function updateDomainConfig (VodUpdateDomainConfigRequest $req): VodUpdateDomainConfigResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('UpdateDomainConfig', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodUpdateDomainConfigResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DescribeDomainConfig.
     *
     * @param $req VodDescribeDomainConfigRequest
     * @return VodDescribeDomainConfigResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function describeDomainConfig (VodDescribeDomainConfigRequest $req): VodDescribeDomainConfigResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DescribeDomainConfig', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodDescribeDomainConfigResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * AddCallbackSubscription.
     *
     * @param $req VodAddCallbackSubscriptionRequest
     * @return VodAddCallbackSubscriptionResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function addCallbackSubscription (VodAddCallbackSubscriptionRequest $req): VodAddCallbackSubscriptionResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('AddCallbackSubscription', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodAddCallbackSubscriptionResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * SetCallbackEvent.
     *
     * @param $req VodSetCallbackEventRequest
     * @return VodSetCallbackEventResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function setCallbackEvent (VodSetCallbackEventRequest $req): VodSetCallbackEventResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('SetCallbackEvent', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodSetCallbackEventResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetSmartStrategyLitePlayInfo.
     *
     * @param $req VodGetSmartStrategyLitePlayInfoRequest
     * @return VodGetSmartStrategyLitePlayInfoResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getSmartStrategyLitePlayInfo (VodGetSmartStrategyLitePlayInfoRequest $req): VodGetSmartStrategyLitePlayInfoResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetSmartStrategyLitePlayInfo', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetSmartStrategyLitePlayInfoResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * GetAppInfo.
     *
     * @param $req VodGetAppInfoRequest
     * @return VodGetAppInfoResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function getAppInfo (VodGetAppInfoRequest $req): VodGetAppInfoResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('GetAppInfo', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodGetAppInfoResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DescribeVodSpaceTranscodeData.
     *
     * @param $req DescribeVodSpaceTranscodeDataRequest
     * @return DescribeVodSpaceTranscodeDataResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function describeVodSpaceTranscodeData (DescribeVodSpaceTranscodeDataRequest $req): DescribeVodSpaceTranscodeDataResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DescribeVodSpaceTranscodeData', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new DescribeVodSpaceTranscodeDataResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DescribeVodSpaceAIStatisData.
     *
     * @param $req DescribeVodSpaceAIStatisDataRequest
     * @return DescribeVodSpaceAIStatisDataResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function describeVodSpaceAIStatisData (DescribeVodSpaceAIStatisDataRequest $req): DescribeVodSpaceAIStatisDataResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DescribeVodSpaceAIStatisData', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new DescribeVodSpaceAIStatisDataResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DescribeVodSpaceSubtitleStatisData.
     *
     * @param $req DescribeVodSpaceSubtitleStatisDataRequest
     * @return DescribeVodSpaceSubtitleStatisDataResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function describeVodSpaceSubtitleStatisData (DescribeVodSpaceSubtitleStatisDataRequest $req): DescribeVodSpaceSubtitleStatisDataResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DescribeVodSpaceSubtitleStatisData', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new DescribeVodSpaceSubtitleStatisDataResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DescribeVodSpaceDetectStatisData.
     *
     * @param $req DescribeVodSpaceDetectStatisDataRequest
     * @return DescribeVodSpaceDetectStatisDataResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function describeVodSpaceDetectStatisData (DescribeVodSpaceDetectStatisDataRequest $req): DescribeVodSpaceDetectStatisDataResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DescribeVodSpaceDetectStatisData', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new DescribeVodSpaceDetectStatisDataResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DescribeVodSpaceWorkflowDetailData.
     *
     * @param $req DescribeVodSpaceWorkflowDetailDataRequest
     * @return DescribeVodSpaceWorkflowDetailDataResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function describeVodSpaceWorkflowDetailData (DescribeVodSpaceWorkflowDetailDataRequest $req): DescribeVodSpaceWorkflowDetailDataResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DescribeVodSpaceWorkflowDetailData', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new DescribeVodSpaceWorkflowDetailDataResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DescribeVodSpaceEditDetailData.
     *
     * @param $req DescribeVodSpaceEditDetailDataRequest
     * @return DescribeVodSpaceEditDetailDataResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function describeVodSpaceEditDetailData (DescribeVodSpaceEditDetailDataRequest $req): DescribeVodSpaceEditDetailDataResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DescribeVodSpaceEditDetailData', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new DescribeVodSpaceEditDetailDataResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DescribeVodSnapshotData.
     *
     * @param $req DescribeVodSnapshotDataRequest
     * @return DescribeVodSnapshotDataResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function describeVodSnapshotData (DescribeVodSnapshotDataRequest $req): DescribeVodSnapshotDataResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DescribeVodSnapshotData', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new DescribeVodSnapshotDataResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DescribeVodSpaceStorageData.
     *
     * @param $req VodDescribeVodSpaceStorageDataRequest
     * @return VodDescribeVodSpaceStorageDataResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function describeVodSpaceStorageData (VodDescribeVodSpaceStorageDataRequest $req): VodDescribeVodSpaceStorageDataResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DescribeVodSpaceStorageData', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodDescribeVodSpaceStorageDataResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DescribeVodDomainTrafficData.
     *
     * @param $req VodDescribeVodDomainTrafficDataRequest
     * @return VodDescribeVodDomainTrafficDataResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function describeVodDomainTrafficData (VodDescribeVodDomainTrafficDataRequest $req): VodDescribeVodDomainTrafficDataResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DescribeVodDomainTrafficData', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodDescribeVodDomainTrafficDataResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DescribeVodDomainBandwidthData.
     *
     * @param $req VodDescribeVodDomainBandwidthDataRequest
     * @return VodDescribeVodDomainBandwidthDataResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function describeVodDomainBandwidthData (VodDescribeVodDomainBandwidthDataRequest $req): VodDescribeVodDomainBandwidthDataResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DescribeVodDomainBandwidthData', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new VodDescribeVodDomainBandwidthDataResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DescribeVodEnhanceImageData.
     *
     * @param $req DescribeVodEnhanceImageDataRequest
     * @return DescribeVodEnhanceImageDataResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function describeVodEnhanceImageData (DescribeVodEnhanceImageDataRequest $req): DescribeVodEnhanceImageDataResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DescribeVodEnhanceImageData', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new DescribeVodEnhanceImageDataResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DescribeVodSpaceEditStatisData.
     *
     * @param $req DescribeVodSpaceEditStatisDataRequest
     * @return DescribeVodSpaceEditStatisDataResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function describeVodSpaceEditStatisData (DescribeVodSpaceEditStatisDataRequest $req): DescribeVodSpaceEditStatisDataResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DescribeVodSpaceEditStatisData', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new DescribeVodSpaceEditStatisDataResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DescribeVodPlayedStatisData.
     *
     * @param $req DescribeVodPlayedStatisDataRequest
     * @return DescribeVodPlayedStatisDataResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function describeVodPlayedStatisData (DescribeVodPlayedStatisDataRequest $req): DescribeVodPlayedStatisDataResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DescribeVodPlayedStatisData', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new DescribeVodPlayedStatisDataResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DescribeVodMostPlayedStatisData.
     *
     * @param $req DescribeVodMostPlayedStatisDataRequest
     * @return DescribeVodMostPlayedStatisDataResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function describeVodMostPlayedStatisData (DescribeVodMostPlayedStatisDataRequest $req): DescribeVodMostPlayedStatisDataResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DescribeVodMostPlayedStatisData', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new DescribeVodMostPlayedStatisDataResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DescribeVodRealtimeMediaData.
     *
     * @param $req DescribeVodRealtimeMediaDataRequest
     * @return DescribeVodRealtimeMediaDataResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function describeVodRealtimeMediaData (DescribeVodRealtimeMediaDataRequest $req): DescribeVodRealtimeMediaDataResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DescribeVodRealtimeMediaData', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new DescribeVodRealtimeMediaDataResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DescribeVodRealtimeMediaDetailData.
     *
     * @param $req DescribeVodRealtimeMediaDetailDataRequest
     * @return DescribeVodRealtimeMediaDetailDataResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function describeVodRealtimeMediaDetailData (DescribeVodRealtimeMediaDetailDataRequest $req): DescribeVodRealtimeMediaDetailDataResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DescribeVodRealtimeMediaDetailData', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new DescribeVodRealtimeMediaDetailDataResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * DescribeVodVidTrafficFileLog.
     *
     * @param $req DescribeVodVidTrafficFileLogRequest
     * @return DescribeVodVidTrafficFileLogResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function describeVodVidTrafficFileLog (DescribeVodVidTrafficFileLogRequest $req): DescribeVodVidTrafficFileLogResponse
	{
		try {
			$query = VodUtils::formatRequestParam($req);
			$response = $this->request('DescribeVodVidTrafficFileLog', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new DescribeVodVidTrafficFileLogResponse();
		try {
            $respData = VodUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
}  // end of service
